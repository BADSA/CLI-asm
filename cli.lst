     1                                  ; ***********************************************************************
     2                                  ; Tarea Programada CLI													*
     3                                  ; Command Line Interface												*
     4                                  ; Codigo Nasm															*
     5                                  ; Prof. Jaime Gutierrez Alfaro											*
     6                                  ; Arquitectura de computadoras											*
     7                                  ; Instituto Tecnologico de Costa Rica									*
     8                                  ; Daniel Solis Mendez													*
     9                                  ; Melvin Alonso Elizondo Perez											*
    10                                  ; II Semestre / 2013													*
    11                                  ; ***********************************************************************
    12                                  
    13                                  ;--------------------------------------------
    14                                  ; Esto es para hacer el codigo mas legible  |
    15                                  ;--------------------------------------------
    16                                  sys_exit	equ 1
    17                                  stdout		equ 1
    18                                  stdin 		equ 0
    19                                  sys_read 	equ 3
    20                                  sys_write 	equ 4
    21                                  sys_open 	equ 5
    22                                  
    23                                  %define sys_unlink 10
    24                                  %define sys_link 9
    25                                  %define sys_creat 8
    26                                  %define sys_rename 38
    27                                  %define sys_close 6
    28                                  
    29                                  SECTION .bss ; Datos no inicializados.
    30                                  	
    31                                  	bufLen				equ 	100 ; Longitud del buffer igual a 10 bytes.
    32 00000000 <res 00000064>          	buffer 				resb 	bufLen ; 100 bytes para los comandos del usuario.
    33                                  
    34                                  	bufLenNomArchivo	equ		50 ; Longitud del buffer 50 bytes.
    35 00000064 <res 00000032>          	bufferNomArchivo	resb	bufLenNomArchivo  ; 50 bytes para guardar los nombres de los archivos
    36 00000096 <res 00000032>          	bufferNomArchivo2	resb	bufLenNomArchivo  ; necesarios para los comandos.
    37                                  	
    38                                  	bufLenArchivo		equ		1600 ; Tamano para leer el archivo en memoria.
    39 000000C8 <res 00000640>          	bufferArchivo		resb	bufLenArchivo 
    40                                  	
    41                                  	
    42                                  SECTION .data ; Datos inicializados
    43                                  	;----------------------------------------------------
    44                                  	; Mensajes usados durante la ejecucion del programa.|
    45                                  	;----------------------------------------------------
    46                                  
    47 00000000 4241445341203E2000      	promptTxt:	 		db		"BADSA > ",0
    48                                  	len: 				equ 	$-promptTxt
    49                                  	
    50 00000009 0A4772616369617320-     	despedidaTxt:		db  	10,'Gracias por usar BADSA CLI! ',10,10
    51 00000012 706F72207573617220-
    52 0000001B 424144534120434C49-
    53 00000024 21200A0A           
    54                                  	len3:				equ		$-despedidaTxt
    55                                  	
    56 00000028 0A4572726F723A206E-     	errorArchivoTexto: 	db 		10,"Error: no se pudo encontrar el archivo.", 10, 10
    57 00000031 6F207365207075646F-
    58 0000003A 20656E636F6E747261-
    59 00000043 7220656C2061726368-
    60 0000004C 69766F2E0A0A       
    61                                  	errorArchivoLen:	equ 	$-errorArchivoTexto
    62                                  	
    63 00000052 1B5B481B5B324A          	clrScr:				db 		`\33[H\33[2J`
    64                                  	len9:				equ 	$-clrScr
    65                                  	
    66 00000059 0A00                    	enter:				db		10,0
    67                                  	lenEnter:			equ		$-enter	
    68                                  	
    69 0000005B 6269656E0A              	bien:				db		"bien",10
    70                                  	lenBien:			equ		$-bien
    71                                  
    72 00000060 0A4552524F523A0A4E-     	errorComando:		db		10, "ERROR:",10,"No existe comando con ese nombre.",10,"ENTER para continuar",10
    73 00000069 6F2065786973746520-
    74 00000072 636F6D616E646F2063-
    75 0000007B 6F6E20657365206E6F-
    76 00000084 6D6272652E0A454E54-
    77 0000008D 455220706172612063-
    78 00000096 6F6E74696E7561720A 
    79                                  	lenErrorComando:	equ		$-errorComando
    80                                  	
    81 0000009F 0A426F7272616E646F-     	msgBorrando:		db		10,"Borrando el archivo...",10
    82 000000A8 20656C206172636869-
    83 000000B1 766F2E2E2E0A       
    84                                  	lenBorrando:		equ		$-msgBorrando
    85                                  	
    86 000000B7 0A4E6F207365207075-     	msg_fail:			db		10,"No se pudo completar la operacion. :[",10
    87 000000C0 646F20636F6D706C65-
    88 000000C9 746172206C61206F70-
    89 000000D2 65726163696F6E2E20-
    90 000000DB 3A5B0A             
    91                                  	lenFail:			equ		$-msg_fail
    92                                  	
    93 000000DE 0A4F7065726163696F-     	msg_success:		db		10,"Operacion realizada satisfactoriamente :]",10
    94 000000E7 6E207265616C697A61-
    95 000000F0 646120736174697366-
    96 000000F9 6163746F7269616D65-
    97 00000102 6E7465203A5D0A     
    98                                  	lenSuccess:			equ		$-msg_success
    99                                  	
   100 00000109 0A4573746120736567-     	pregBorrar:			db		10,"Esta seguro que desea eliminar el archivo? s/n",10,"-> "
   101 00000112 75726F207175652064-
   102 0000011B 6573656120656C696D-
   103 00000124 696E617220656C2061-
   104 0000012D 72636869766F3F2073-
   105 00000136 2F6E0A2D3E20       
   106                                  	lenPregBorrar:		equ		$-pregBorrar
   107                                  	
   108 0000013C 0A4573746120736567-     	pregRenom:			db		10,"Esta seguro que desea renombrar el archivo? s/n",10,"-> "
   109 00000145 75726F207175652064-
   110 0000014E 657365612072656E6F-
   111 00000157 6D6272617220656C20-
   112 00000160 6172636869766F3F20-
   113 00000169 732F6E0A2D3E20     
   114                                  	lenPregRenom:		equ		$-pregRenom
   115                                  	
   116                                  	;-------------------------------------
   117                                  	; Variables usadas en la ejecucion.  |
   118                                  	;-------------------------------------
   119                                  
   120                                  	;-------------------------------------
   121                                  	; Archivos txt con matrices de juego.|
   122                                  	;-------------------------------------
   123 00000170 41797564612F6D6F73-     	ayudaMostrarTxt:		db 		"Ayuda/mostrar.ayuda",0
   124 00000179 747261722E61797564-
   125 00000182 6100               
   126 00000184 41797564612F626F72-     	ayudaBorrarTxt:			db 		"Ayuda/borrar.ayuda",0
   127 0000018D 7261722E6179756461-
   128 00000196 00                 
   129 00000197 41797564612F72656E-     	ayudaRenombrarTxt:		db 		"Ayuda/renombrar.ayuda",0
   130 000001A0 6F6D627261722E6179-
   131 000001A9 75646100           
   132 000001AD 41797564612F636F70-     	ayudaCopiarTxt:			db 		"Ayuda/copiar.ayuda",0
   133 000001B6 6961722E6179756461-
   134 000001BF 00                 
   135 000001C0 41797564612F636F6D-     	ayudaCompararTxt:		db 		"Ayuda/comparar.ayuda",0
   136 000001C9 70617261722E617975-
   137 000001D2 646100             
   138                                  		
   139                                  	
   140                                  		
   141                                  SECTION .text
   142                                  	global _start
   143                                  	
   144                                  _start:
   145 00000000 90                      	nop
   146                                  
   147                                  ;------------------------------------------------------------------------------
   148                                  ; Ciclo IngresarComando que se mantiene mientras el usuario no digite "salir" |
   149                                  ;------------------------------------------------------------------------------
   150                                  IngresarComando:
   151                                      ; Limpia la pantalla
   152 00000001 B9[52000000]                mov ecx,clrScr
   153 00000006 BA07000000                  mov edx,len9
   154 0000000B E8F7060000                  call DisplayText
   155                                      
   156 00000010 31C9                        xor ecx,ecx
   157 00000012 B174                        mov cl,'t' ; Se mueve una t de true para indicar que el ciclo continua.
   158 00000014 51                          push ecx ; Se guarda el valor para verificar la continuidad del ciclo.
   159                                      
   160                                  	; Muestra en pantalla el prompt.
   161 00000015 B9[00000000]            	mov ecx, promptTxt
   162 0000001A BA09000000              	mov edx, len
   163 0000001F E8E3060000              	call DisplayText
   164                                  	
   165                                      ; Lee el comando digitado por el usuario.
   166 00000024 B9[00000000]                mov ecx, buffer
   167 00000029 BA64000000                  mov        edx, bufLen
   168 0000002E E8E1060000                  call ReadText		
   169                                  	
   170                                  	; Verificacion de la primera letra para analizar si es un posible comando.
   171 00000033 803D[00000000]73        	cmp byte[buffer] , 's'
   172 0000003A 7467                    	je ComprobarSalir
   173                                  	
   174 0000003C 803D[00000000]6D        	cmp byte[buffer] , 'm'
   175 00000043 0F8486000000            	je ComprobarMostrar
   176                                  	
   177 00000049 803D[00000000]62        	cmp byte[buffer] , 'b'
   178 00000050 0F843F010000            	je ComprobarBorrar
   179                                  	
   180 00000056 803D[00000000]72        	cmp byte[buffer] , 'r'
   181 0000005D 0F8439020000            	je ComprobarRenombrar
   182                                  	
   183 00000063 803D[00000000]63        	cmp byte[buffer] , 'c'
   184 0000006A 7521                    	jne ErrorComando
   185                                  	
   186 0000006C 803D[01000000]6F        	cmp byte[buffer+1] , 'o'
   187 00000073 0F8468030000            	je ComprobarCopiarOComparar
   188 00000079 7512                    	jne ErrorComando
   189                                  	
   190                                  	Continuar: ; Chequea la variable del ciclo.
   191 0000007B 31C9                    		xor ecx,ecx 
   192 0000007D 59                      		pop ecx
   193 0000007E 83F974                  		cmp ecx,'t'
   194 00000081 0F847AFFFFFF            		je IngresarComando
   195 00000087 0F8594060000            		jne Fin
   196                                  	
   197                                  ;-------------------------------------------	
   198                                  ; Muestra texto de comando no encontrado.  |
   199                                  ;-------------------------------------------
   200                                  ErrorComando:
   201 0000008D B9[60000000]            		mov ecx,errorComando
   202 00000092 BA3F000000              		mov edx,lenErrorComando
   203 00000097 E86B060000              		call DisplayText
   204                                  
   205                                  		; Espera por ENTER para ser presionado.
   206 0000009C E83D060000              		call LeerComando
   207 000000A1 EBD8                    		jmp Continuar
   208                                  	
   209                                  ;-------------------------------------------------------------------------------------
   210                                  ; Comprueba si "salir" fue digitado y hace lo correspondiente si fue o no ingresado. |
   211                                  ;-------------------------------------------------------------------------------------
   212                                  ComprobarSalir:
   213                                  	; Verifica las letras restantes para "salir".
   214 000000A3 803D[01000000]61        	cmp byte[buffer+1] , 'a'
   215 000000AA 75E1                    	jne ErrorComando
   216 000000AC 803D[02000000]6C        	cmp byte[buffer+2] , 'l'
   217 000000B3 75D8                    	jne ErrorComando
   218 000000B5 803D[03000000]69        	cmp byte[buffer+3] , 'i'
   219 000000BC 75CF                    	jne ErrorComando
   220 000000BE 803D[04000000]72        	cmp byte[buffer+4] , 'r'
   221 000000C5 75C6                    	jne ErrorComando
   222                                  	
   223                                  	; Si la instruccion fue salir se termina el ciclo moviendo una f a cl.
   224 000000C7 31C9                    	xor ecx,ecx 
   225 000000C9 59                      	pop ecx
   226 000000CA B166                    	mov cl,'f'
   227 000000CC 51                      	push ecx
   228 000000CD EBAC                    	jmp Continuar
   229                                  	
   230                                  ;---------------------------------------------------------------------------------------
   231                                  ; Comprueba si "mostrar" fue digitado y hace lo correspondiente si fue o no ingresado. |
   232                                  ;---------------------------------------------------------------------------------------
   233                                  ComprobarMostrar:
   234                                  	; Verifica las letras restantes para "mostrar".
   235 000000CF 803D[01000000]6F        	cmp byte[buffer+1] , 'o'
   236 000000D6 75B5                    	jne ErrorComando
   237 000000D8 803D[02000000]73        	cmp byte[buffer+2] , 's'
   238 000000DF 75AC                    	jne ErrorComando
   239 000000E1 803D[03000000]74        	cmp byte[buffer+3] , 't'
   240 000000E8 75A3                    	jne ErrorComando
   241 000000EA 803D[04000000]72        	cmp byte[buffer+4] , 'r'
   242 000000F1 759A                    	jne ErrorComando
   243 000000F3 803D[05000000]61        	cmp byte[buffer+5] , 'a'
   244 000000FA 7591                    	jne ErrorComando
   245 000000FC 803D[06000000]72        	cmp byte[buffer+6] , 'r'
   246 00000103 7588                    	jne ErrorComando
   247 00000105 803D[07000000]0A        	cmp byte[buffer+7] , 10
   248 0000010C 0F8498040000            	je Ayudas
   249 00000112 803D[07000000]20        	cmp byte[buffer+7] , ' '
   250 00000119 0F856EFFFFFF            	jne ErrorComando
   251 0000011F 803D[08000000]2D        	cmp byte[buffer+8] , '-'
   252 00000126 BB09000000              	mov ebx,9
   253 0000012B 0F8426040000            	je ComprobarAyuda
   254                                  
   255                                  	; Lee el nombre del archivo que se quiere mostrar.
   256                                  	.leerNombreArchivo:
   257 00000131 B908000000              		mov ecx, 8
   258 00000136 31C0                    		xor eax,eax
   259                                  		.ciclo:
   260 00000138 80B9[00000000]0A        			cmp byte[buffer+ecx],10
   261 0000013F 740F                    			je AbrirArchivo
   262 00000141 8A81[00000000]          			mov al,byte[buffer+ecx]
   263 00000147 8881[5C000000]          			mov byte[bufferNomArchivo + ecx - 8] , al
   264 0000014D 41                      			inc ecx
   265 0000014E EBE8                    			jmp .ciclo 
   266                                  
   267                                  	; Abre el archivo donde esta la matriz del juego.
   268                                  	AbrirArchivo:
   269 00000150 BB[64000000]            	mov	ebx, bufferNomArchivo
   270 00000155 B900000000              	mov	ecx, 0 ; Read only		
   271 0000015A B805000000              	mov	eax, sys_open
   272 0000015F CD80                    	int	80h
   273                                  		
   274                                  	; Si ocurrio un error al intentar abrir el archivo brinca a ErrorArchivo
   275                                  	ChequeaError:
   276 00000161 85C0                    		test	eax, eax
   277 00000163 0F8885050000            		js	ErrorArchivo
   278                                  
   279                                  	; Sino ocurrio error, entonces se lee el archivo en un buffer.
   280 00000169 89C3                    	mov		ebx, eax
   281 0000016B B9[C8000000]            	mov		ecx, bufferArchivo
   282 00000170 BA40060000              	mov		edx, bufLenArchivo
   283 00000175 B803000000              	mov		eax, sys_read		
   284 0000017A CD80                    	int 	80h
   285                                  	
   286                                  	; Se imprime en pantalla el archivo.
   287 0000017C B9[C8000000]            	mov ecx,bufferArchivo
   288 00000181 BA40060000              	mov edx,bufLenArchivo
   289 00000186 E87C050000              	call DisplayText
   290                                  	
   291                                  	; Simula la espera por un ENTER.
   292 0000018B E84E050000              	call LeerComando
   293 00000190 E9E6FEFFFF              	jmp Continuar	
   294                                  
   295                                  ;---------------------------------------------------------------------------------------
   296                                  ; Comprueba si "borrar" fue digitado y hace lo correspondiente si fue o no ingresado.  |
   297                                  ;---------------------------------------------------------------------------------------
   298                                  ComprobarBorrar:
   299                                  	; Verifica las letras restantes para "borrar".
   300 00000195 803D[01000000]6F        	cmp byte[buffer+1] , 'o'
   301 0000019C 0F85EBFEFFFF            	jne ErrorComando
   302 000001A2 803D[02000000]72        	cmp byte[buffer+2] , 'r'
   303 000001A9 0F85DEFEFFFF            	jne ErrorComando
   304 000001AF 803D[03000000]72        	cmp byte[buffer+3] , 'r'
   305 000001B6 0F85D1FEFFFF            	jne ErrorComando
   306 000001BC 803D[04000000]61        	cmp byte[buffer+4] , 'a'
   307 000001C3 0F85C4FEFFFF            	jne ErrorComando
   308 000001C9 803D[05000000]72        	cmp byte[buffer+5] , 'r'
   309 000001D0 0F85B7FEFFFF            	jne ErrorComando
   310 000001D6 803D[06000000]0A        	cmp byte[buffer+6] , 10
   311 000001DD 0F84C7030000            	je Ayudas
   312 000001E3 803D[06000000]20        	cmp byte[buffer+6] , ' '
   313 000001EA 0F859DFEFFFF            	jne ErrorComando
   314 000001F0 803D[07000000]2D        	cmp byte[buffer+7] , '-'
   315 000001F7 BB08000000              	mov ebx,8
   316 000001FC 0F8455030000            	je ComprobarAyuda
   317                                  
   318                                  	; Lee el nombre del archivo que se quiere borrar.
   319                                  	.leerNombreArchivo:
   320 00000202 B907000000              		mov ecx, 7
   321 00000207 31C0                    		xor eax,eax
   322                                  		.ciclo:
   323 00000209 80B9[00000000]0A        			cmp byte[buffer+ecx],10
   324 00000210 741F                    			je BorrarArchivo
   325 00000212 80B9[00000000]20        			cmp byte[buffer+ecx],' '
   326 00000219 740F                    			je PosibleForzado
   327 0000021B 8A81[00000000]          			mov al,byte[buffer+ecx]
   328 00000221 8881[5D000000]          			mov byte[bufferNomArchivo + ecx - 7] , al
   329 00000227 41                      			inc ecx
   330 00000228 EBDF                    			jmp .ciclo
   331                                  	
   332                                  	PosibleForzado:
   333 0000022A E830040000              			call ComprobarForzado
   334 0000022F 7421                    			je NoPreguntaBorrar
   335                                  		
   336                                  	
   337                                  	;--------------------------------
   338                                  	; Pasos para borrar el archivo. |
   339                                  	;--------------------------------
   340                                  	BorrarArchivo:
   341                                  		; Pregunta si esta seguro que desea borrar.
   342 00000231 BA33000000              		mov edx,lenPregBorrar
   343 00000236 B9[09010000]            		mov ecx,pregBorrar
   344 0000023B E8C7040000              		call DisplayText
   345                                  		
   346                                  		; Lee la opcion escogida.
   347 00000240 E899040000              		call LeerComando
   348                                  		
   349 00000245 803D[00000000]73        		cmp byte[buffer],'s'
   350 0000024C 0F8529FEFFFF            		jne Continuar
   351                                  		
   352                                  		NoPreguntaBorrar:
   353                                  			; Se dispone a borrar si la opcion fue 's'
   354 00000252 BA18000000              			mov edx, lenBorrando
   355 00000257 B9[9F000000]            			mov ecx, msgBorrando
   356 0000025C E8A6040000              			call DisplayText
   357                                  			
   358                                  			; Se intenta borrar el archivo.
   359 00000261 BB[64000000]            			mov ebx, bufferNomArchivo
   360 00000266 B80A000000              			mov eax, sys_unlink
   361 0000026B CD80                    			int 0x80
   362 0000026D 83F800                  			cmp eax, 0
   363 00000270 7411                    			je .sucess
   364                                  			
   365                                  			; Mensaje de no se pudo borrar el archivo.
   366                                  			.fail:
   367 00000272 B9[B7000000]            				mov ecx, msg_fail
   368 00000277 BA27000000              				mov edx,lenFail
   369 0000027C E886040000              				call DisplayText
   370 00000281 EB0F                    				jmp .Done
   371                                  			
   372                                  			; Mensaje de el borrado fue exitoso.
   373                                  			.sucess:
   374 00000283 B9[DE000000]            				mov ecx,msg_success
   375 00000288 BA2B000000              				mov edx,lenSuccess
   376 0000028D E875040000              				call DisplayText
   377                                  			
   378                                  			; Simula la espera de un ENTER.
   379                                  			.Done:
   380 00000292 E847040000              				call LeerComando
   381                                  		
   382 00000297 E9DFFDFFFF              		jmp Continuar
   383                                  
   384                                  ;---------------------------------------------------------------------------------------
   385                                  ; Comprueba si "renombrar" fue digitado y hace lo correspondiente si fue o no ingresado. |
   386                                  ;---------------------------------------------------------------------------------------
   387                                  ComprobarRenombrar:
   388                                  	; Verifica las letras restantes para "renombrar".
   389 0000029C 803D[01000000]65        	cmp byte[buffer+1] , 'e'
   390 000002A3 0F85E4FDFFFF            	jne ErrorComando
   391 000002A9 803D[02000000]6E        	cmp byte[buffer+2] , 'n'
   392 000002B0 0F85D7FDFFFF            	jne ErrorComando
   393 000002B6 803D[03000000]6F        	cmp byte[buffer+3] , 'o'
   394 000002BD 0F85CAFDFFFF            	jne ErrorComando
   395 000002C3 803D[04000000]6D        	cmp byte[buffer+4] , 'm'
   396 000002CA 0F85BDFDFFFF            	jne ErrorComando
   397 000002D0 803D[05000000]62        	cmp byte[buffer+5] , 'b'
   398 000002D7 0F85B0FDFFFF            	jne ErrorComando
   399 000002DD 803D[06000000]72        	cmp byte[buffer+6] , 'r'
   400 000002E4 0F85A3FDFFFF            	jne ErrorComando
   401 000002EA 803D[07000000]61        	cmp byte[buffer+7] , 'a'
   402 000002F1 0F8596FDFFFF            	jne ErrorComando
   403 000002F7 803D[08000000]72        	cmp byte[buffer+8] , 'r'
   404 000002FE 0F8589FDFFFF            	jne ErrorComando
   405 00000304 803D[09000000]0A        	cmp byte[buffer+9] , 10
   406 0000030B 0F8499020000            	je Ayudas
   407 00000311 803D[09000000]20        	cmp byte[buffer+9] , ' '
   408 00000318 0F856FFDFFFF            	jne ErrorComando
   409 0000031E 803D[0A000000]2D        	cmp byte[buffer+10] , '-'
   410 00000325 BB0B000000              	mov ebx,11
   411 0000032A 0F8427020000            	je ComprobarAyuda
   412                                  	
   413                                  	; Lee el nombre del archivo que se quiere renombrar.
   414                                  	leerNombreArchivo1:
   415 00000330 B90A000000              		mov ecx, 10
   416 00000335 31C0                    		xor eax,eax
   417                                  		.ciclo:
   418 00000337 80B9[00000000]20        			cmp byte[buffer+ecx],' '
   419 0000033E 740F                    			je leerNombreArchivo2
   420 00000340 8A81[00000000]          			mov al,byte[buffer+ecx]
   421 00000346 8881[5A000000]          			mov byte[bufferNomArchivo + ecx - 10] , al
   422 0000034C 41                      			inc ecx
   423 0000034D EBE8                    			jmp .ciclo
   424                                  
   425                                  	; Lee el nuevo nombre que se desea poner.
   426                                  	leerNombreArchivo2:
   427 0000034F 41                      		inc	ecx
   428 00000350 89CB                    		mov ebx, ecx
   429 00000352 31C0                    		xor eax,eax
   430                                  		.ciclo:
   431 00000354 80B9[00000000]0A        			cmp byte[buffer+ecx],10
   432 0000035B 7423                    			je RenArchivo
   433 0000035D 80B9[00000000]20        			cmp byte[buffer+ecx],' '
   434 00000364 7413                    			je PosibleForzado2
   435 00000366 8A81[00000000]          			mov al,byte[buffer+ecx]
   436 0000036C 51                      			push ecx
   437 0000036D 29D9                    			sub ecx,ebx
   438 0000036F 8881[96000000]          			mov byte[bufferNomArchivo2 + ecx] , al
   439 00000375 59                      			pop ecx
   440 00000376 41                      			inc ecx
   441 00000377 EBDB                    			jmp .ciclo
   442                                  	
   443                                  	PosibleForzado2:
   444 00000379 E8E1020000              		call ComprobarForzado
   445 0000037E 7421                    		je NoPreguntaRen
   446                                  	
   447                                  	
   448                                  	;-----------------------------------		
   449                                  	; Pasos para renombrar el archivo. |
   450                                  	;-----------------------------------
   451                                  	RenArchivo:
   452                                  
   453                                  		; Pregunta si esta seguro que desea renombrar.
   454 00000380 BA34000000              		mov edx,lenPregRenom
   455 00000385 B9[3C010000]            		mov ecx,pregRenom
   456 0000038A E878030000              		call DisplayText
   457                                  		
   458                                  		; Lee la opcion escogida.
   459 0000038F E84A030000              		call LeerComando
   460                                  		
   461 00000394 803D[00000000]73        		cmp byte[buffer],'s'
   462 0000039B 0F85DAFCFFFF            		jne Continuar
   463                                  	
   464                                  		NoPreguntaRen:
   465                                  			
   466                                  			; DEBERIA SERVIR PERO NO SIRVE
   467 000003A1 BB[64000000]            			mov ebx, bufferNomArchivo             
   468 000003A6 B826000000              			mov eax, sys_rename          
   469 000003AB B9[96000000]            			mov ecx, bufferNomArchivo2              
   470 000003B0 CD80                    			int 80h                    
   471 000003B2 83F800                  			cmp eax, 0
   472 000003B5 7E11                    			jle .sucess 	
   473                                  			
   474                                  			; Mostrar mensaje de no se pudo completar.
   475                                  			.fail:
   476 000003B7 B9[B7000000]            				mov ecx, msg_fail
   477 000003BC BA27000000              				mov edx,lenFail
   478 000003C1 E841030000              				call DisplayText
   479 000003C6 EB0F                    				jmp .Done
   480                                  				
   481                                  			; Mostrar mensaje de operacion exitosa.	
   482                                  			.sucess:
   483 000003C8 B9[DE000000]            				mov ecx,msg_success
   484 000003CD BA2B000000              				mov edx,lenSuccess
   485 000003D2 E830030000              				call DisplayText
   486                                  			
   487                                  			; Simular espera por ENTER
   488                                  			.Done:
   489 000003D7 E802030000              				call LeerComando
   490                                  
   491 000003DC E99AFCFFFF              		jmp Continuar
   492                                  	
   493                                  ;---------------------------------------
   494                                  ; Se distingue entre Copiar y Comparar |
   495                                  ;---------------------------------------
   496                                  ComprobarCopiarOComparar:
   497 000003E1 803D[02000000]70        	cmp byte[buffer+2] , 'p'
   498 000003E8 7418                    	je ComprobarCopiar
   499 000003EA 803D[02000000]6D        	cmp byte[buffer+2] , 'm'
   500 000003F1 0F84DE000000            	je ComprobarComparar
   501 000003F7 0F8590FCFFFF            	jne ErrorComando
   502 000003FD E91F030000              	jmp Fin
   503                                  
   504                                  
   505                                  ;---------------------------------------------------------------------------------------
   506                                  ; Comprueba si "copiar" fue digitado y hace lo correspondiente si fue o no ingresado.  |
   507                                  ;---------------------------------------------------------------------------------------
   508                                  ComprobarCopiar:
   509                                  	; Verifica las letras restantes para "copiar".
   510 00000402 803D[03000000]69        	cmp byte[buffer+3] , 'i'
   511 00000409 0F857EFCFFFF            	jne ErrorComando
   512 0000040F 803D[04000000]61        	cmp byte[buffer+4] , 'a'
   513 00000416 0F8571FCFFFF            	jne ErrorComando
   514 0000041C 803D[05000000]72        	cmp byte[buffer+5] , 'r'
   515 00000423 0F8564FCFFFF            	jne ErrorComando
   516 00000429 803D[06000000]0A        	cmp byte[buffer+6] , 10
   517 00000430 0F8474010000            	je Ayudas
   518 00000436 803D[06000000]20        	cmp byte[buffer+6] , ' '
   519 0000043D 0F854AFCFFFF            	jne ErrorComando
   520 00000443 803D[07000000]2D        	cmp byte[buffer+7] , '-'
   521 0000044A BB08000000              	mov ebx,8
   522 0000044F 0F8402010000            	je ComprobarAyuda
   523                                  
   524                                  	; Lee el nombre del archivo que se quiere copiar.
   525                                  	_LeerNombreArchivo:
   526 00000455 B907000000              		mov ecx, 7
   527 0000045A 31C0                    		xor eax,eax
   528                                  		.ciclo:
   529 0000045C 80B9[00000000]20        			cmp byte[buffer+ecx],' '
   530 00000463 740F                    			je _LeerNombreArchivo2
   531 00000465 8A81[00000000]          			mov al,byte[buffer+ecx]
   532 0000046B 8881[5D000000]          			mov byte[bufferNomArchivo + ecx - 7] , al
   533 00000471 41                      			inc ecx
   534 00000472 EBE8                    			jmp .ciclo
   535                                  	
   536                                  	; Lee el nombre que se quiere asignar a la copia.
   537                                  	_LeerNombreArchivo2:
   538 00000474 41                      		inc	ecx
   539 00000475 89CB                    		mov ebx, ecx
   540 00000477 31C0                    		xor eax,eax
   541                                  		.ciclo:
   542 00000479 80B9[00000000]0A        			cmp byte[buffer+ecx],10
   543 00000480 7413                    			je CopiarArchivo
   544 00000482 8A81[00000000]          			mov al,byte[buffer+ecx]
   545 00000488 51                      			push ecx
   546 00000489 29D9                    			sub ecx,ebx
   547 0000048B 8881[96000000]          			mov byte[bufferNomArchivo2 + ecx] , al
   548 00000491 59                      			pop ecx
   549 00000492 41                      			inc ecx
   550 00000493 EBE4                    			jmp .ciclo
   551                                  			
   552                                  			
   553                                  	;-----------------------------------		
   554                                  	; Pasos para copiar el archivo.    |
   555                                  	;-----------------------------------
   556                                  	CopiarArchivo:
   557                                  		
   558                                  		; Intenta copiar el archivo	
   559 00000495 BB[64000000]            		mov ebx, bufferNomArchivo             
   560 0000049A B809000000              		mov eax, sys_link          
   561 0000049F B9[96000000]            		mov ecx, bufferNomArchivo2              
   562 000004A4 CD80                    		int 0x80                    
   563 000004A6 83F800                  		cmp eax, 0
   564 000004A9 7E11                    		jle .sucess               
   565                                  		
   566                                  		; Mostrar mensaje de no se pudo completar.
   567                                  		.fail:
   568 000004AB B9[B7000000]            			mov ecx, msg_fail
   569 000004B0 BA27000000              			mov edx,lenFail
   570 000004B5 E84D020000              			call DisplayText
   571 000004BA EB0F                    			jmp .Done
   572                                  
   573                                  		; Mostrar mensaje de operacion exitosa.
   574                                  		.sucess:
   575 000004BC B9[DE000000]            			mov ecx,msg_success
   576 000004C1 BA2B000000              			mov edx,lenSuccess
   577 000004C6 E83C020000              			call DisplayText
   578                                  
   579                                  		; Espera por ENTER
   580                                  		.Done:
   581 000004CB E80E020000              			call LeerComando
   582                                  			
   583 000004D0 E9A6FBFFFF              		jmp Continuar
   584                                  
   585                                  
   586                                  ;----------------------------------------------------------------------------------------
   587                                  ; Comprueba si "comparar" fue digitado y hace lo correspondiente si fue o no ingresado. |
   588                                  ;----------------------------------------------------------------------------------------
   589                                  ComprobarComparar:
   590                                  	; Verifica las letras restantes para "comparar".
   591 000004D5 803D[03000000]70        	cmp byte[buffer+3] , 'p'
   592 000004DC 0F85ABFBFFFF            	jne ErrorComando
   593 000004E2 803D[04000000]61        	cmp byte[buffer+4] , 'a'
   594 000004E9 0F859EFBFFFF            	jne ErrorComando
   595 000004EF 803D[05000000]72        	cmp byte[buffer+5] , 'r'
   596 000004F6 0F8591FBFFFF            	jne ErrorComando
   597 000004FC 803D[06000000]61        	cmp byte[buffer+6] , 'a'
   598 00000503 0F8584FBFFFF            	jne ErrorComando	
   599 00000509 803D[07000000]72        	cmp byte[buffer+7] , 'r'
   600 00000510 0F8577FBFFFF            	jne ErrorComando	
   601 00000516 803D[08000000]0A        	cmp byte[buffer+8] , 10
   602 0000051D 0F8487000000            	je Ayudas
   603 00000523 803D[08000000]20        	cmp byte[buffer+8] , ' '
   604 0000052A 0F855DFBFFFF            	jne ErrorComando
   605 00000530 803D[09000000]2D        	cmp byte[buffer+9] , '-'
   606 00000537 BB0A000000              	mov ebx,10
   607 0000053C 7419                    	je ComprobarAyuda
   608                                  	
   609 0000053E B9[5B000000]            	mov ecx,bien
   610 00000543 BA05000000              	mov edx,lenBien
   611 00000548 E8BA010000              	call DisplayText
   612 0000054D E88C010000              	call LeerComando
   613 00000552 E924FBFFFF              	jmp Continuar
   614                                  	
   615                                  
   616                                  ;----------------------------------------------
   617                                  ; Verifica las letras restantes para "ayuda". |
   618                                  ;----------------------------------------------
   619                                  ComprobarAyuda:
   620 00000557 80BB[00000000]2D        	cmp byte[buffer+ebx] , '-'
   621 0000055E 0F8529FBFFFF            	jne ErrorComando
   622 00000564 43                      	inc ebx
   623 00000565 80BB[00000000]61        	cmp byte[buffer+ebx] , 'a'
   624 0000056C 0F851BFBFFFF            	jne ErrorComando
   625 00000572 43                      	inc ebx
   626 00000573 80BB[00000000]79        	cmp byte[buffer+ebx] , 'y'
   627 0000057A 0F850DFBFFFF            	jne ErrorComando
   628 00000580 43                      	inc ebx
   629 00000581 80BB[00000000]75        	cmp byte[buffer+ebx] , 'u'
   630 00000588 0F85FFFAFFFF            	jne ErrorComando	
   631 0000058E 43                      	inc ebx
   632 0000058F 80BB[00000000]64        	cmp byte[buffer+ebx] , 'd'
   633 00000596 0F85F1FAFFFF            	jne ErrorComando	
   634 0000059C 43                      	inc ebx
   635 0000059D 80BB[00000000]61        	cmp byte[buffer+ebx] , 'a'
   636 000005A4 0F85E3FAFFFF            	jne ErrorComando	
   637                                  
   638                                  ;--------------------------------------------
   639                                  ; Abre el archivo correspondiente de ayuda  |
   640                                  ; segun el comando ingresado.               |
   641                                  ;--------------------------------------------
   642                                  Ayudas:
   643 000005AA 803D[00000000]6D        	cmp byte[buffer] , 'm'
   644 000005B1 742E                    	je ayudaMostrar
   645 000005B3 803D[00000000]62        	cmp byte[buffer] , 'b'
   646 000005BA 7438                    	je ayudaBorrar
   647 000005BC 803D[00000000]72        	cmp byte[buffer] , 'r'
   648 000005C3 7442                    	je ayudaRenombrar
   649 000005C5 803D[02000000]70        	cmp byte[buffer+2] , 'p'
   650 000005CC 744C                    	je ayudaCopiar
   651                                  
   652                                  	ayudaComparar:
   653                                  		; Abre el archivo donde esta la ayuda de comparar.
   654 000005CE BB[C0010000]            		mov	ebx, ayudaCompararTxt
   655 000005D3 B900000000              		mov	ecx, 0 ; Read only		
   656 000005D8 B805000000              		mov	eax, sys_open
   657 000005DD CD80                    		int	80h	
   658 000005DF EB4A                    		jmp _chequeaError
   659                                  
   660                                  	ayudaMostrar:
   661                                  		; Abre el archivo donde esta la ayuda de mostrar.
   662 000005E1 BB[70010000]            		mov	ebx, ayudaMostrarTxt
   663 000005E6 B900000000              		mov	ecx, 0 ; Read only		
   664 000005EB B805000000              		mov	eax, sys_open
   665 000005F0 CD80                    		int	80h
   666 000005F2 EB37                    		jmp _chequeaError
   667                                  
   668                                  	ayudaBorrar:
   669                                  		; Abre el archivo donde esta la ayuda de borrar.
   670 000005F4 BB[84010000]            		mov	ebx, ayudaBorrarTxt
   671 000005F9 B900000000              		mov	ecx, 0 ; Read only		
   672 000005FE B805000000              		mov	eax, sys_open
   673 00000603 CD80                    		int	80h
   674 00000605 EB24                    		jmp _chequeaError
   675                                  
   676                                  	ayudaRenombrar:
   677                                  		; Abre el archivo donde esta la ayuda de renombrar.
   678 00000607 BB[97010000]            		mov	ebx, ayudaRenombrarTxt
   679 0000060C B900000000              		mov	ecx, 0 ; Read only		
   680 00000611 B805000000              		mov	eax, sys_open
   681 00000616 CD80                    		int	80h
   682 00000618 EB11                    		jmp _chequeaError
   683                                  		
   684                                  	ayudaCopiar:
   685                                  		; Abre el archivo donde esta la ayuda de copiar.
   686 0000061A BB[AD010000]            		mov	ebx, ayudaCopiarTxt
   687 0000061F B900000000              		mov	ecx, 0 ; Read only		
   688 00000624 B805000000              		mov	eax, sys_open
   689 00000629 CD80                    		int	80h
   690                                  	
   691                                  			
   692                                  	; Si ocurrio un error al intentar abrir el archivo brinca a ErrorArchivo.
   693                                  	_chequeaError:
   694 0000062B 85C0                    		test	eax, eax
   695 0000062D 0F88BB000000            		js	ErrorArchivo
   696                                  
   697                                  	; Sino ocurrio error, entonces se lee el archivo en un buffer.
   698 00000633 89C3                    	mov		ebx, eax
   699 00000635 B9[C8000000]            	mov		ecx, bufferArchivo
   700 0000063A BA40060000              	mov		edx, bufLenArchivo
   701 0000063F B803000000              	mov		eax, sys_read		
   702 00000644 CD80                    	int 	80h
   703                                  	
   704                                  	; Se imprime en pantalla el archivo de ayuda.
   705 00000646 B9[C8000000]            	mov ecx,bufferArchivo
   706 0000064B BA40060000              	mov edx,bufLenArchivo
   707 00000650 E8B2000000              	call DisplayText
   708                                  		
   709                                  	
   710                                  	; Espera por un ENTER
   711 00000655 E884000000              	call LeerComando
   712 0000065A E91CFAFFFF              	jmp Continuar
   713                                  
   714                                  ;-------------------------------------------------------------------------
   715                                  ; Comprueba si el argumento "--forzado" fue digitado de manera correcta. |
   716                                  ;-------------------------------------------------------------------------
   717                                  ComprobarForzado:
   718 0000065F 41                      	inc ecx
   719 00000660 80B9[00000000]2D        	cmp byte[buffer+ecx],'-'
   720 00000667 0F853DFFFFFF            	jne Ayudas
   721 0000066D 41                      	inc ecx
   722 0000066E 80B9[00000000]2D        	cmp byte[buffer+ecx],'-'
   723 00000675 0F852FFFFFFF            	jne Ayudas
   724 0000067B 41                      	inc ecx
   725 0000067C 80B9[00000000]66        	cmp byte[buffer+ecx],'f'
   726 00000683 0F8521FFFFFF            	jne Ayudas
   727 00000689 41                      	inc ecx
   728 0000068A 80B9[00000000]6F        	cmp byte[buffer+ecx],'o'
   729 00000691 0F8513FFFFFF            	jne Ayudas
   730 00000697 41                      	inc ecx
   731 00000698 80B9[00000000]72        	cmp byte[buffer+ecx],'r'
   732 0000069F 0F8505FFFFFF            	jne Ayudas
   733 000006A5 41                      	inc ecx
   734 000006A6 80B9[00000000]7A        	cmp byte[buffer+ecx],'z'
   735 000006AD 0F85F7FEFFFF            	jne Ayudas
   736 000006B3 41                      	inc ecx
   737 000006B4 80B9[00000000]61        	cmp byte[buffer+ecx],'a'
   738 000006BB 0F85E9FEFFFF            	jne Ayudas
   739 000006C1 41                      	inc ecx
   740 000006C2 80B9[00000000]64        	cmp byte[buffer+ecx],'d'
   741 000006C9 0F85DBFEFFFF            	jne Ayudas
   742 000006CF 41                      	inc ecx
   743 000006D0 80B9[00000000]6F        	cmp byte[buffer+ecx],'o'
   744 000006D7 0F85CDFEFFFF            	jne Ayudas
   745 000006DD C3                      	ret
   746                                  
   747                                  
   748                                  
   749                                  	
   750                                  ;**********************************************************************************************************************
   751                                  ; 												-> RUTINAS INTERMEDIAS <-                                             *
   752                                  ;**********************************************************************************************************************
   753                                  
   754                                  ;-------------------------------------
   755                                  ; Lee el comando digitado en buffer  |
   756                                  ;-------------------------------------	
   757                                  LeerComando:
   758 000006DE B9[00000000]            	mov ecx, buffer
   759 000006E3 BA64000000              	mov edx, bufLen
   760 000006E8 E827000000              	call ReadText
   761 000006ED C3                      	ret
   762                                  
   763                                  ;---------------------------------------------------------------------------
   764                                  ; Desplega un mensaje de error notificando que no se pudo abrir el archivo |
   765                                  ; y vuelve al prompt.                                                      |
   766                                  ;---------------------------------------------------------------------------
   767                                  ErrorArchivo:
   768 000006EE B9[28000000]            	mov     ecx, errorArchivoTexto
   769 000006F3 BA2A000000              	mov		edx, errorArchivoLen
   770 000006F8 E80A000000                  call    DisplayText
   771 000006FD E8DCFFFFFF                  call LeerComando ; Simula la espera por el presionado de enter.
   772 00000702 E974F9FFFF              	jmp Continuar	
   773                                  	
   774                                  ;--------------------------------------------------------------------
   775                                  ; Desplega algo en la salida estándar. debe "setearse" lo siguiente:|
   776                                  ; ecx: el puntero al mensaje a desplegar.                           |
   777                                  ; edx: el largo del mensaje a desplegar.                            |
   778                                  ; Modifica los registros eax y ebx.                                 |
   779                                  ;--------------------------------------------------------------------
   780                                  DisplayText:
   781 00000707 B804000000              	mov eax,sys_write
   782 0000070C BB01000000              	mov ebx,stdout
   783 00000711 CD80                    	int 80h
   784 00000713 C3                      	ret
   785                                  	
   786                                  ;-----------------------------------------------------------------
   787                                  ; Lee algo de la entrada estándar.debe "setearse" lo siguiente:  |
   788                                  ; ecx: el puntero al buffer donde se almacenará.                 |
   789                                  ; edx: el largo del mensaje a leer.	                             |
   790                                  ;-----------------------------------------------------------------
   791                                  ReadText:
   792 00000714 B803000000              	mov eax,sys_read
   793 00000719 BB00000000              	mov ebx,stdin
   794 0000071E CD80                    	int 80h
   795 00000720 C3                      	ret
   796                                  
   797                                  ;----------------------------------------------------
   798                                  ; Realiza los movimientos de los valores necesarios |
   799                                  ; para finalizar la ejecucion del programa.         |
   800                                  ;----------------------------------------------------
   801                                  Fin:
   802                                  	; Muestra en consola un mensaje de salida.
   803 00000721 B9[09000000]            	mov ecx,despedidaTxt
   804 00000726 BA1F000000              	mov edx,len3
   805 0000072B E8D7FFFFFF              	call DisplayText
   806                                  	
   807 00000730 B801000000              	mov eax,sys_exit
   808 00000735 BB00000000              	mov ebx,0
   809 0000073A CD80                    	int 80h
